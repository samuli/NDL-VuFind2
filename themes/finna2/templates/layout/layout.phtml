<?=$this->doctype('HTML5')?>
<?php // Do not use HTML comments before DOCTYPE to avoid quirks-mode in IE ?>
<!-- START of: finna - layout/layout.phtml -->
<?php $currentTabClass = $this->layout()->currentTabId ? ' tab-' . preg_replace('/[^a-z0-9]/', '', strtolower($this->layout()->currentTabId)) : '' ?>
<html lang="<?=$this->layout()->userLang?>"<?php if ($this->layout()->rtl): ?> dir="rtl"<?php endif; ?>>
  <head>
    <?$this->headThemeResources()?>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width,initial-scale=1.0"/>
    <?php // Turn off automatic telephone number detection on iOS ?>
    <meta name="format-detection" content="telephone=no" />
    <?php // set finna-facebook.png image for Facebook sharing if image is present and we aren't on record view
      if ($this->imageLink('finna-facebook.png') != '' && $this->layout()->templateName != 'view') {
        $this->headMeta()->setProperty('og:image', $this->serverUrl() . $this->imageLink('finna-facebook.png'));
      }
    ?>

    <?php if ($appleTouchIcon = $this->imageSrc()->getSourceAddress('webapp-icon-180.png')): ?>
      <link rel="apple-touch-icon" sizes="180x180" href="<?=$this->escapeHtmlAttr($appleTouchIcon)?>">
    <?php endif ?>
    <?php if ($webAppManifest = $this->imageSrc()->getSourceAddress('manifest.json')): ?>
      <link rel="manifest" href="<?=$webAppManifest?>">
    <?php endif ?>

    <?=$this->headMeta()?>
    <?=$this->headTitle()?>
    <?php
      // Set up OpenSearch link:
      $this->headLink(
        [
          'href' => $this->url('search-opensearch') . '?method=describe',
          'type' => 'application/opensearchdescription+xml',
          'title' => $this->transEsc('Library Catalog Search'),
          'rel' => 'search'
        ]
      );

      // IE-specific stylesheet
      $this->headLink()->appendStylesheet('ie9-and-lower.css', 'screen', 'lte IE 9');
      $this->headLink()->appendStylesheet('ie8-and-lower.css', 'screen', 'lt IE 9');
      $this->headScript()->appendFile('vendor/classList.js', 'text/javascript', ['conditional' => 'lte IE 9']);
      $this->headScript()->appendFile('vendor/html5shiv.js', 'text/javascript', ['conditional' => 'lt IE 9']);
      $this->headScript()->appendFile('vendor/respond.js', 'text/javascript', ['conditional' => 'lt IE 9']);
      $this->headScript()->appendFile("vendor/jquery.waitforimages.min.js");
      $finnaSurvey
        = in_array($this->layout()->templateDir, ['search', 'record'])
        && $this->finnaSurvey()->isEnabled();

      if ($finnaSurvey) {
        $this->headScript()->appendFile('finna-survey.js');
      }
    ?>
    <?=$this->headLink()?>
    <?=$this->headStyle()?>
    <?php
      // Collect small scripts together and append as one block:
      $appendScripts = [];

      // Set global variables for Javascript code:
      $this->headScript()->prependScript(
         "var path = '" . rtrim($this->url('home'), '/') . "';"
         . "var module = '" . $this->layout()->templateDir . "';"
         . "var action = '" . $this->layout()->templateName . "';"
         . 'var userIsLoggedIn = ' . ($this->auth()->isLoggedIn() ? 'true' : 'false') . ';'
      );

      if (!isset($this->renderingError)) {
        // Add Finna translation strings
        $this->jsTranslations()->addStrings(
          [
            'change_hold_success' => 'change_hold_success',
            'show_more' => 'show_more',
            'show_less' => 'show_less',
            'Organisation' => 'Organisation',
            'location-service' => 'Location Service',
            'login' => 'Login',
            'none_selected' => 'none_selected',
            'selected' => 'selected',
            'shelf_location' => 'shelf_location',
            'request_change_done' => 'request_change_done',
            'other_records' => 'other_records',
            'records' => 'records',
            'search_placeholder' => 'search_placeholder',
            'Image' => 'Image',
            'show_filters' => 'show_filters',
            'hide_filters' => 'hide_filters'
          ]
        );
        // Add translation strings
        $this->jsTranslations()->addStrings(
          [
            'add_tag_success' => 'add_tag_success',
            'bulk_email_success' => 'bulk_email_success',
            'bulk_noitems_advice' => 'bulk_noitems_advice',
            'bulk_save_success' => 'bulk_save_success',
            'close' => 'close',
            'collection_empty' => 'collection_empty',
            'error_occurred' => 'An error has occurred',
            'go_to_list' => 'go_to_list',
            'hold_available' => 'hold_available',
            'libphonenumber_invalid' => 'libphonenumber_invalid',
            'libphonenumber_invalidcountry' => 'libphonenumber_invalidcountry',
            'libphonenumber_invalidregion' => 'libphonenumber_invalidregion',
            'libphonenumber_notanumber' => 'libphonenumber_notanumber',
            'libphonenumber_toolong' => 'libphonenumber_toolong',
            'libphonenumber_tooshort' => 'libphonenumber_tooshort',
            'libphonenumber_tooshortidd' => 'libphonenumber_tooshortidd',
            'loading' => 'Loading',
            'more' => 'more',
            'number_thousands_separator' => [
                'number_thousands_separator', null, ','
            ],
            'sms_success' => 'sms_success',
            'radiusPrefix' => 'Radius',
            'circleCaption' => 'Select Area',
            'clearCaption' => 'Clear Selections',
            'removeCaption' => 'Clear',
            'map_zoom_in' => 'map_zoom_in',
            'map_zoom_out' => 'map_zoom_out',
            'street_search_geolocation_inactive' => 'street_search_geolocation_inactive',
            'street_search_checking_for_geolocation' => 'street_search_checking_for_geolocation',
            'street_search_geolocation_available' => 'street_search_geolocation_available',
            'street_search_geolocation_position_unavailable' => 'street_search_geolocation_position_unavailable',
            'street_search_geolocation_other_error' => 'street_search_geolocation_other_error',
            'street_search_geolocation_inactive' => 'street_search_geolocation_inactive',
            'street_search_timeout' => 'street_search_timeout',
            'street_search_no_streetname_found' => 'street_search_no_streetname_found',
            'street_search_reversegeocode_unavailable' => 'street_search_reversegeocode_unavailable',
            'street_search_searching_for' => 'street_search_searching_for',
            'street_search_coordinates_found' => 'street_search_coordinates_found',
            'street_search_coordinates_found_accuracy_bad' => 'street_search_coordinates_found_accuracy_bad',
            'Prev' => 'Prev',
            'Next' => 'Next',
            'Next Record' => 'Next Record',
            'Previous Record' => 'Previous Record',
            'No Cover Image' => 'No Cover Image'
          ]
        );
        // Add libphonenumber.js strings
        $this->jsTranslations()->addStrings(
          [
            "'Phone number invalid'" => 'libphonenumber_invalid',
            "'Invalid country calling code'" => 'libphonenumber_invalidcountry',
            "'Invalid region code'" => 'libphonenumber_invalidregion',
            "'The string supplied did not seem to be a phone number'" => 'libphonenumber_notanumber',
            "'The string supplied is too long to be a phone number'" => 'libphonenumber_toolong',
            "'The string supplied is too short to be a phone number'" => 'libphonenumber_tooshort',
            "'Phone number too short after IDD'" => 'libphonenumber_tooshortidd'
          ]
        );
        // Deal with cart stuff:
        $cart = $this->cart();
        if ($cart->isActive()) {
          $this->headScript()->appendFile("vendor/cookies.js");
          $this->headScript()->appendFile("cart.js");
          $domain = $cart->getCookieDomain();
          if (!empty($domain)) {
            $appendScripts[] = 'VuFind.cart.setDomain("' . $domain . '");';
          }
          $cookiePath = $cart->getCookiePath();
          if (!empty($cookiePath)) {
            $appendScripts[] = 'VuFind.cart.setCookiePath("' . $cookiePath . '");';
          }
          $this->jsTranslations()->addStrings(
            [
              'addBookBag' => 'Add to Book Bag',
              'bookbagFull' => 'bookbag_full_msg',
              'bookbagMax' => $cart->getMaxSize(),
              'bookbagStatusFull' => 'bookbag_full',
              'confirmDelete' => 'confirm_delete',
              'confirmEmpty' => 'bookbag_confirm_empty',
              'itemsAddBag' => 'items_added_to_bookbag',
              'itemsInBag' => 'items_already_in_bookbag',
              'removeBookBag' => 'Remove from Book Bag',
              'viewBookBag' => 'View Book Bag'
            ]
          );
        }

        // Autocomplete strings:
        if ($this->searchbox()->autocompleteEnabled(isset($this->searchClassId) ? $this->searchClassId : 'Solr')) {
           if ($phrase = $this->autocomplete()->getPhraseSearch()) {
             $this->jsTranslations()->addStrings(['autocomplete_phrase' => $this->translate('autocomplete_phrase')]);
           }

           $browse = $browse ?? false;
           if (!$browse) {
             $activeTab = isset($this->searchClassId) ? $this->searchClassId : DEFAULT_SEARCH_BACKEND;
             if (isset($searchTabs['selected'])) {
               $activeTab = $searchTabs['selected']['id'];
             }

             foreach (['suggestion','facet','handler', 'filter', 'phrase'] as $section) {
               $section = "autocomplete_section_$section";
               if ($this->translationEmpty($section)) {
                  continue;
               }
               $this->jsTranslations()->addStrings([$section => $this->translate($section)]);
             }
             foreach ($this->autocomplete()->getFilters($activeTab) as $filter) {
               $this->jsTranslations()->addStrings([$filter['label'] => $this->translate($filter['label'])]);
             }
             $acHandlers = $this->autocomplete()->getHandlers($activeTab);
             foreach ($acHandlers as $handler) {
               $this->jsTranslations()->addStrings([$handler['handler'] => $this->translate($handler['label'])]);
             }
           }
        }
      }

      // Session keep-alive
      if ($this->keepAlive()) {
          $appendScripts[] = 'var keepAliveInterval = ' . $this->keepAlive() . ';';
          $this->headScript()->appendFile("keep_alive.js");
      }

      // If account ajax is active, load script and add language strings
      $account = $this->auth()->getManager();
      if ($account->ajaxEnabled()) {
        $this->headScript()->appendFile("account_ajax.js");
        $this->jsTranslations()->addStrings(
          [
            'account_checkouts_due' => 'account_checkouts_due',
            'account_checkouts_overdue' => 'account_checkouts_overdue',
            'account_has_alerts' => 'account_has_alerts',
            'account_normal_checkouts' => 'account_normal_checkouts',
            'account_requests_available' => 'account_requests_available',
            'account_requests_in_transit' => 'account_requests_in_transit',
          ]
        );
      }
    ?>
    <?php
    if ($this->scriptSrc('custom.js')) {
       $this->headScript()->appendFile('custom.js');
    }
    ?>
    <?php
      $root = rtrim($this->url('home'), '/');
      $translations = $this->jsTranslations()->getJSON();
      $dsb = DEFAULT_SEARCH_BACKEND;
      $appendScripts[] = <<<JS
VuFind.path = '{$root}';
VuFind.defaultSearchBackend = '{$dsb}';
VuFind.addTranslations({$translations});
JS;
      $this->headScript()->appendScript(implode("\n", $appendScripts));
    ?>
    <?=$this->headScript()?>
    <?php if ($template = $this->content()->findTemplateForLng("content/Additions/general-post-head")): ?>
      <?=$this->render($template)?>
    <?php endif; ?>
  </head>
  <body class="template-dir-<?=$this->templateDir?> template-name-<?=$this->templateName?> <?=$this->layoutClass('offcanvas-row')?><?php if ($this->layout()->rtl): ?> rtl<?php endif; ?>">
    <?=$this->render('search/modals.phtml') ?>
    <?php // Set up the search box -- there are three possible cases:
      // 1. No search box was set; we should default to the normal box
      // 2. It was set to false; we should display nothing
      // 3. It is set to a custom string; we should display the provided version
      // Set up default search box if no data was provided from the template;
      // this covers case 1.  Cases 2 and 3 are then covered by logic below.
      if (!isset($this->layout()->searchbox)) {
        $url = $this->searchMemory()->getLastSearchUrl();
        if ($this->layout()->templateDir != 'record' && $this->layout()->templateDir != 'collection' || !$url) {
            $this->layout()->searchbox = $this->context($this)->renderInContext("search/searchbox.phtml", ['ignoreHiddenFilterMemory' => isset($this->layout()->ignoreHiddenFilterMemory) ? $this->layout()->ignoreHiddenFilterMemory : false]);
        } else {
          $searchId = $this->searchMemory()->getLastSearchId();
          $searchType = $this->searchMemory()->getLastSearchType();
          $lookfor = $this->searchMemory()->getLastSearchLookfor();
          $lastSearchClassId = $this->searchMemory()->getLastSearchClassId();

          //parse querystring to variables
          parse_str($url, $parsed);

          if ($searchType == 'advanced') {
            $this->layout()->searchbox = $this->context($this)->renderInContext(
                "search/searchbox.phtml",
                [
                  'searchType' => "advanced",
                  'ignoreHiddenFilterMemory' => isset($this->layout()->ignoreHiddenFilterMemory) ? $this->layout()->ignoreHiddenFilterMemory : false
                ]
            );

            $this->layout()->advSearchHeader = $this->context($this)->renderInContext(
                'search/header.phtml',
                [
                  'searchType' => $searchType,
                  'searchId' => $searchId,
                  'lookfor' => $lookfor,
                  'onRecordPage' => true
                ]
            );
          } else {
            if ($this->searchClassId === $lastSearchClassId) {
              // Init filters only when backendId has not been changed since last search
              $filters = [];
              foreach ($parsed as $key => $filter) {
                if (strpos($key, 'filter') !== false) {
                  //used filters to filterArray
                  foreach ($filter as $value) {
                    $filterArray = explode(':', $value, 2);
                    $filterKey = $filterArray[0];
                    $filterValue = trim($filterArray[1], '"');
                    if (array_key_exists($filterKey, $filters)) {
                      array_push($filters[$filterKey], $filterValue);
                    } else {
                      $filters[$filterKey] = [$filterValue];
                    }
                  }
                } elseif (strpos($key, 'type') !== false) {
                  $type = explode('#', $filter)[0];
                }
              }
            } else {
              // BackendId changed since last search, reset search term
              $lookfor = '';
            }

            $this->layout()->searchbox = $this->context($this)->renderInContext(
                "search/searchbox.phtml",
                [
                  'lookfor' => $lookfor ?? '',
                  'filterList' => $filters ?? [],
                  'ignoreHiddenFilterMemory' => isset($this->layout()->ignoreHiddenFilterMemory) ? $this->layout()->ignoreHiddenFilterMemory : false,
                  'searchIndex' => $type ?? ''
                ]
            );
          }
        }
      }
    ?>
    <header class="hidden-print">
      <?php if (!$this->cookie()->get('cookieConsent')): ?>
        <?=$this->partial('Helpers/cookie-consent.phtml');?>
      <?php endif; ?>
      <?php if (!empty($_SERVER['HTTP_USER_AGENT']) && preg_match('/(?i)msie [5-8]/', $_SERVER['HTTP_USER_AGENT'])): ?>
        <div class="container-fluid system-messages">
          <?=$this->translate('outdated_browser_message_html');?>
        </div>
      <?php endif; ?>
      <?php if ($messages = $this->systemMessages()): ?>
        <div class="container-fluid system-messages">
          <?php foreach ($messages as $message): ?>
            <div>
              <?=$message // intentionally not escaped so that markup can be used ?>
            </div>
          <?php endforeach; ?>
        </div>
      <?php endif; ?>
      <div class="container-fluid navbar">
        <div>
          <?php if (isset($this->layout()->srmessage)): // message for benefit of screen-reader users ?>
            <span class="sr-only"><?=$this->layout()->srmessage ?></span>
          <?php endif; ?>
          <a class="sr-only" href="#content"><?=$this->transEsc('Skip to content') ?></a>
          <?=$this->render('navibar.phtml')?>
        </div>
      </div>
    </header>
    <section role="search" class="searchContent<?=$currentTabClass?>">
      <h1 class="sr-only"><?=$this->transEsc('Search')?></h1>
        <?php if ($this->layout()->templateName === 'home' && $this->layout()->templateDir === 'search'): ?>
            <a class="btn btn-primary btn-uppercase floating-feedback-btn" href="<?=$this->url('feedback-home') ?>"><?=$this->transEsc('Feedback')?></a>
        <?php endif; ?>
      <?php if (!empty($this->layout()->infoMessage)): ?>
        <div class="alert alert-info street-info">
          <div class="container">
              <?=$this->layout()->infoMessage?>
          </div>
        </div>
      <?php endif; ?>
      <div class="search-form-container <?= ($this->searchMemory()->getLastSearchType() === 'advanced' ? 'advanced-container' : '') ?>">
        <div class="container">
          <?php if ($this->layout()->templateName === 'home' && $this->layout()->templateDir === 'search'): ?>
            <div class="logo clearfix">
              <?=$this->render('search/logosection.phtml') ?>
            </div>
          <?php endif; ?>
        <?php if (isset($this->layout()->introduction) && $this->resolver('search/introductiontext.phtml')): ?>
        <div class="introduction">
          <div class="introduction clearfix">
            <?=$this->render('search/introductiontext.phtml') ?>
          </div>
        </div>
        <?php endif; ?>
        <?php if ((!isset($this->layout()->showBreadcrumbs) || $this->layout()->showBreadcrumbs == true)
          && !empty($this->layout()->breadcrumbs)
          && $this->layout()->breadcrumbs !== false
        ): ?>
          <nav class="breadcrumbs" aria-label="<?=$this->transEsc('Breadcrumbs') ?>">
            <div class="hidden-print">
              <ul class="breadcrumb">
                <?php if(is_array($this->layout()->breadcrumbs)): ?>
                  <?php if(count($this->layout()->breadcrumbs) > 1): ?>
                    <?=$this->render('breadcrumbs/multi.phtml', [
                        'parents' => $this->layout()->breadcrumbs,
                        'title' => $this->layout()->title,
                        'end' => $this->layout()->breadcrumbEnd,
                        'from' => $this->layout()->from
                      ]) ?>
                  <?php else: ?>
                    <?=$this->render('breadcrumbs/default.phtml', [
                        'parents' => $this->layout()->breadcrumbs,
                        'title' => $this->layout()->title
                      ]) ?>
                  <?php endif; ?>
                <?php else: ?>
                  <?=$this->layout()->breadcrumbs ?>
                <?php endif; ?>
              </ul>
            </div>
          </nav>
        <?php endif; ?>

        <?php if (!empty($this->layout()->searchbox) && $this->layout()->searchbox !== false): ?>
            <?=$this->layout()->searchbox ?>
        <?php endif; ?>
      </div>
    </div>
    <?php if ($this->layout()->templateName === 'home' && $this->layout()->templateDir === 'search' && !$this->translationEmpty('search_bg_image_info_html')): ?>
        <div aria-hidden="true" class="search-bg-image-info">
          <div class="search-bg-image-info-content">
            <?=$this->translate('search_bg_image_info_html')?>
          </div>
        </div>
    <?php endif; ?>
      <?php if ($this->layout()->templateName === 'home' && $this->layout()->templateDir === 'search' && $template = $this->content()->findTemplateForLng('search/home/browsebar')): ?>
        <?=$this->render($template)?>
      <?php endif; ?>
    </section>

    <?php // TODO: get rid of template-dir-* and template-name-* here ?>
    <section role="main" class="main template-dir-<?=$this->templateDir?> template-name-<?=$this->templateName?><?=$this->browse ? ' browse' : '' ?><?=$currentTabClass?>">
      <?php if (!empty($this->layout()->advSearchHeader)): ?>
        <?=$this->layout()->advSearchHeader; ?>
      <?php endif; ?>
      <?php if (!empty($this->layout()->finnaFilters)): ?>
        <div class="search-filters">
          <div class="container filters-container">
            <?=$this->layout()->finnaFilters?>
          </div>
        </div>
      <?php endif; ?>
      <?php if (!empty($this->layout()->finnaStreetBar)): ?>
        <?=$this->layout()->finnaStreetBar?>
      <?php endif; ?>
      <?php if (!empty($this->layout()->finnaMainHeader)): ?>
        <div class="finna-main-header">
          <div class="container">
            <?=$this->layout()->finnaMainHeader?>
          </div>
        </div>
      <?php endif; ?>
      <?php if (!empty($this->layout()->finnaMainTabs)): ?>
        <div class="finna-main-tabs">
          <div class="container">
            <?=$this->layout()->finnaMainTabs?>
          </div>
        </div>
      <?php endif; ?>
      <div id="content" class="container main-content">
        <?=$this->layout()->content ?>
      </div>
    </section>
    <footer class="hidden-print">
      <div class="container">
        <?=$this->render('footer.phtml')?>
        <?=$this->layout()->poweredBy ?>
      </div>
    </footer>
    <?=$this->googleanalytics()?>
    <?=$this->piwik()?>
    <?php if ($template = $this->content()->findTemplateForLng("content/Additions/general-post-body")): ?>
      <div class="container-fluid general-post-body">
        <div class="container">
          <div>
            <div>
              <?=$this->render($template)?>
            </div>
          </div>
        </div>
      </div>
    <?php endif; ?>

    <?php if ($finnaSurvey): ?>
      <?=$this->finnaSurvey()->render()?>
    <?php endif; ?>
    <?php
      // Show post-login followup in lightbox
      $url = $this->followup()->retrieveAndClear('postLoginLightbox', null);
      if ($url && $this->layout()->getTemplate() !== 'layout/lightbox') {
        $script = <<<EOT
          finna.layout.showPostLoginLightbox('{$url}');
EOT;
          echo $this->inlineScript(\Laminas\View\Helper\HeadScript::SCRIPT, $script, 'SET');
      }
    ?>
  </body>
</html>
<!-- END of: finna - layout/layout.phtml -->
